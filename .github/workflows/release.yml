name: 🎉 Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write
  discussions: write

env:
  MINECRAFT_VERSION: "1.20.4"
  FABRIC_VERSION: "0.15.6"

jobs:
  # Job 1: Crear release
  create-release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}
      version: ${{ steps.get-version.outputs.version }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🏷️ Get version
      id: get-version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"
        
    - name: 📋 Generate release notes
      id: release-notes
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        
        # Obtener el tag anterior
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        cat > release_notes.md << EOF
        # 🚀 BuildFabricModServer ${VERSION}
        
        **Fecha de Release:** $(date -u +"%Y-%m-%d")
        **Commit:** ${{ github.sha }}
        
        ## 🎮 Información del Servidor
        
        - **Minecraft Version:** ${{ env.MINECRAFT_VERSION }}
        - **Fabric Loader Version:** ${{ env.FABRIC_VERSION }}
        - **Java Version:** 17+
        - **Arquitecturas Soportadas:** x86_64, ARM64
        
        ## 📦 Qué Incluye Este Release
        
        ### 🛠️ Scripts Principales
        - \`install.sh\` - Instalador automático completo
        - \`update-server.sh\` - Actualizador con backups automáticos
        - \`benchmark.sh\` - Suite de benchmarking y pruebas de rendimiento
        - \`iniciador_optimizado_de_minecraft.sh\` - Iniciador con flags JVM optimizados
        - \`script_optimizacion_debian_11_ARM.sh\` - Optimizaciones para sistemas ARM
        - \`script_optimizacion_debian_11_x86-x86_64.sh\` - Optimizaciones para x86/x64
        
        ### 🐳 Soporte Docker
        - \`Dockerfile\` - Imagen multi-arquitectura optimizada
        - \`docker-compose.yml\` - Orquestación completa con servicios auxiliares
        - \`docker-run.sh\` - Gestor simplificado de contenedores
        
        ### ⚙️ Configuraciones
        - Templates de configuración optimizados
        - Configuraciones específicas por arquitectura
        - Configuraciones de seguridad integradas
        
        ### 📚 Documentación
        - Guía de inicio rápido
        - Documentación completa de API
        - Wiki con troubleshooting
        - Templates de issues y PRs
        
        EOF
        
        if [[ -n "$PREVIOUS_TAG" ]]; then
          echo "## 📝 Cambios desde ${PREVIOUS_TAG}" >> release_notes.md
          echo "" >> release_notes.md
          
          # Obtener commits desde el último tag
          git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s" --reverse >> release_notes.md
          echo "" >> release_notes.md
        fi
        
        cat >> release_notes.md << EOF
        
        ## 🚀 Instalación Rápida
        
        ### Opción 1: Instalación Automática
        \`\`\`bash
        # Clonar repositorio
        git clone https://github.com/${{ github.repository }}.git
        cd BuildFabricModServer
        
        # Ejecutar instalador
        chmod +x install.sh
        ./install.sh
        \`\`\`
        
        ### Opción 2: Docker (Recomendado)
        \`\`\`bash
        # Descargar archivos
        wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/docker-compose.yml
        
        # Configurar y ejecutar
        docker-compose up -d
        \`\`\`
        
        ### Opción 3: Imagen Docker Directa
        \`\`\`bash
        docker run -d -p 25565:25565 \\
          -e EULA=true \\
          -v minecraft_world:/opt/minecraft/server/world \\
          ghcr.io/${{ github.repository }}:${VERSION}
        \`\`\`
        
        ## 🔧 Configuración Básica
        
        1. **Aceptar EULA:** Cambiar \`eula=false\` a \`eula=true\` en \`eula.txt\`
        2. **Optimizar sistema:** Ejecutar script de optimización correspondiente
        3. **Configurar servidor:** Editar \`server.properties\` según necesidades
        4. **Agregar mods:** Colocar archivos .jar en carpeta \`mods/\`
        
        ## 📊 Optimizaciones Incluidas
        
        ### Sistema
        - Configuraciones de kernel optimizadas
        - Gestión de memoria mejorada
        - Optimizaciones de red específicas por arquitectura
        - Configuración de firewall y seguridad
        
        ### JVM
        - Flags de Aikar optimizados
        - Garbage Collector G1 configurado
        - Detección automática de RAM
        - Optimizaciones específicas por CPU
        
        ### Docker
        - Imagen multi-arquitectura
        - Healthchecks automáticos
        - Configuración de recursos optimizada
        - Servicios auxiliares (backup, monitoreo)
        
        ## 🆘 Soporte
        
        - 📚 [Documentación Completa](https://github.com/${{ github.repository }}/wiki)
        - 🚀 [Guía de Inicio Rápido](https://github.com/${{ github.repository }}/blob/main/docs/QUICK_START.md)
        - 🐛 [Reportar Issues](https://github.com/${{ github.repository }}/issues/new/choose)
        - 💬 [Discusiones](https://github.com/${{ github.repository }}/discussions)
        
        ## 🤝 Contribuir
        
        ¡Las contribuciones son bienvenidas! Por favor lee nuestra [guía de contribución](CONTRIBUTING.md).
        
        ## 📄 Licencia
        
        Este proyecto está licenciado bajo la Licencia MIT. Ver [LICENSE](LICENSE) para más detalles.
        
        ---
        
        **Checksum de Archivos:**
        Los checksums SHA256 de todos los archivos se encuentran en el archivo \`checksums.txt\` adjunto.
        
        **Verificación de Firma:**
        Este release está firmado digitalmente. Verifica la autenticidad antes de usar en producción.
        EOF
        
        echo "Release notes generadas:"
        cat release_notes.md
        
    - name: 🎉 Create Release
      id: create-release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get-version.outputs.version }}
        name: "Release ${{ steps.get-version.outputs.version }}"
        body_path: release_notes.md
        draft: false
        prerelease: ${{ github.event.inputs.prerelease || false }}
        generate_release_notes: false
        discussion_category_name: "Releases"

  # Job 2: Construir y adjuntar assets
  build-assets:
    name: 📦 Build Release Assets
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 📦 Create release package
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        PACKAGE_NAME="BuildFabricModServer-${VERSION}"
        
        echo "📦 Creando paquete de release: ${PACKAGE_NAME}"
        
        # Crear directorio temporal
        mkdir -p "/tmp/${PACKAGE_NAME}"
        
        # Copiar archivos esenciales
        cp -r \
          *.sh \
          *.yml \
          Dockerfile \
          configs/ \
          docs/ \
          README.md \
          LICENSE \
          .gitignore \
          "/tmp/${PACKAGE_NAME}/"
        
        # Crear archivo de información de versión
        cat > "/tmp/${PACKAGE_NAME}/VERSION" << EOF
        BuildFabricModServer ${VERSION}
        Minecraft: ${{ env.MINECRAFT_VERSION }}
        Fabric: ${{ env.FABRIC_VERSION }}
        Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        Commit: ${{ github.sha }}
        EOF
        
        # Crear archivo de instalación rápida
        cat > "/tmp/${PACKAGE_NAME}/INSTALL_QUICK.md" << EOF
        # Instalación Rápida - BuildFabricModServer ${VERSION}
        
        ## Opción 1: Instalación Automática
        \`\`\`bash
        chmod +x install.sh
        ./install.sh
        \`\`\`
        
        ## Opción 2: Docker
        \`\`\`bash
        # Editar docker-compose.yml (cambiar EULA=true)
        docker-compose up -d
        \`\`\`
        
        ## Configuración Mínima
        1. Aceptar EULA: editar eula.txt
        2. Ejecutar script de optimización
        3. Iniciar servidor
        
        Ver README.md para documentación completa.
        EOF
        
        # Crear checksums
        cd "/tmp/${PACKAGE_NAME}"
        find . -type f -exec sha256sum {} \; > checksums.txt
        cd -
        
        # Crear archivos comprimidos
        cd /tmp
        tar -czf "${PACKAGE_NAME}.tar.gz" "${PACKAGE_NAME}/"
        zip -r "${PACKAGE_NAME}.zip" "${PACKAGE_NAME}/"
        
        # Mover a directorio de trabajo
        mv "${PACKAGE_NAME}.tar.gz" "${GITHUB_WORKSPACE}/"
        mv "${PACKAGE_NAME}.zip" "${GITHUB_WORKSPACE}/"
        mv "${PACKAGE_NAME}/checksums.txt" "${GITHUB_WORKSPACE}/"
        
        echo "✅ Paquetes creados:"
        ls -la "${PACKAGE_NAME}".*
        ls -la checksums.txt
        
    - name: 📤 Upload release assets
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        PACKAGE_NAME="BuildFabricModServer-${VERSION}"
        
        # Subir archivos comprimidos
        gh release upload "${VERSION}" \
          "${PACKAGE_NAME}.tar.gz" \
          "${PACKAGE_NAME}.zip" \
          "checksums.txt" \
          "docker-compose.yml" \
          --clobber
        
        echo "✅ Assets subidos al release ${VERSION}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 3: Actualizar documentación post-release
  update-docs:
    name: 📚 Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release, build-assets]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📝 Update version references
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        
        echo "📝 Actualizando referencias de versión a ${VERSION}..."
        
        # Actualizar README.md con nueva versión
        sed -i "s/Version: [0-9]\+\.[0-9]\+\.[0-9]\+/Version: ${VERSION#v}/" README.md
        
        # Actualizar docker-compose.yml con nueva imagen
        sed -i "s|ghcr.io/${{ github.repository }}:.*|ghcr.io/${{ github.repository }}:${VERSION}|" docker-compose.yml
        
        # Crear badge de versión actualizado
        cat > .github/version-badge.json << EOF
        {
          "schemaVersion": 1,
          "label": "version",
          "message": "${VERSION#v}",
          "color": "blue"
        }
        EOF
        
        echo "✅ Referencias de versión actualizadas"
        
    - name: 📤 Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if ! git diff --quiet; then
          git add .
          git commit -m "docs: update version references to ${{ needs.create-release.outputs.version }} [skip ci]"
          git push
          echo "✅ Documentación actualizada y commiteada"
        else
          echo "ℹ️ No hay cambios en la documentación"
        fi

  # Job 4: Notificaciones post-release
  notify-release:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-assets, update-docs]
    if: success()
    
    steps:
    - name: 📢 Create discussion post
      uses: actions/github-script@v7
      with:
        script: |
          const version = "${{ needs.create-release.outputs.version }}";
          const releaseUrl = `https://github.com/${{ github.repository }}/releases/tag/${version}`;
          
          const discussionBody = `
          # 🎉 Nueva Versión Disponible: ${version}
          
          ¡Hemos lanzado una nueva versión de BuildFabricModServer!
          
          ## 🚀 Highlights de esta versión:
          - Minecraft ${{ env.MINECRAFT_VERSION }}
          - Fabric ${{ env.FABRIC_VERSION }}
          - Optimizaciones mejoradas
          - Mejor soporte Docker
          
          ## 📥 Descargar:
          [Ver Release Completo](${releaseUrl})
          
          ## 💬 ¿Qué opinas?
          Comparte tu experiencia con esta nueva versión, reporta cualquier problema que encuentres, o sugiere mejoras para futuras versiones.
          
          ## 🆘 ¿Necesitas ayuda?
          Si tienes problemas con la instalación o configuración, no dudes en preguntar aquí o [crear un issue](https://github.com/${{ github.repository }}/issues/new/choose).
          `;
          
          // Crear discusión en la categoría "Releases"
          try {
            const discussion = await github.rest.teams.createDiscussionInOrg({
              org: context.repo.owner,
              team_slug: context.repo.repo,
              title: `Release ${version} - ¡Comparte tu experiencia!`,
              body: discussionBody,
            });
            console.log(`Discusión creada: ${discussion.data.html_url}`);
          } catch (error) {
            console.log('No se pudo crear discusión automáticamente:', error.message);
          }
        
    - name: 📱 Send notification (if webhook configured)
      if: ${{ secrets.DISCORD_WEBHOOK || secrets.SLACK_WEBHOOK }}
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/${VERSION}"
        
        MESSAGE="🚀 Nueva versión disponible: BuildFabricModServer ${VERSION}
        
        🎮 Minecraft ${{ env.MINECRAFT_VERSION }}
        🕸️ Fabric ${{ env.FABRIC_VERSION }}
        
        📥 Descargar: ${RELEASE_URL}"
        
        # Discord webhook (si está configurado)
        if [[ -n "${{ secrets.DISCORD_WEBHOOK }}" ]]; then
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"${MESSAGE}\"}" \
               "${{ secrets.DISCORD_WEBHOOK }}"
        fi
        
        # Slack webhook (si está configurado)
        if [[ -n "${{ secrets.SLACK_WEBHOOK }}" ]]; then
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"text\": \"${MESSAGE}\"}" \
               "${{ secrets.SLACK_WEBHOOK }}"
        fi
        
        echo "✅ Notificaciones enviadas"

# Configuración de notificaciones
on_failure:
  notify_maintainers: true
  create_issue: true